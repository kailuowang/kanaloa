kanaloa {

  #Default settings for all dispatchers
  default-dispatcher {
    work-timeout = 1m

    # When displaying messages in logs, this is the length to truncate at.
    length-of-display-for-message = 200

    # how often dispatcher makes adjustment accordingly
    update-interval = 1s

    # When backend fails the work, the dispatcher can retry it for this many times.
    workRetry = 0

    worker-pool {

      # Starting number of workers
      starting-pool-size = 30

      # Minimum number of workers
      min-pool-size = 1

      # Maximum number of workers
      max-pool-size = 400

      # check if worker pool is in a healthy state every such interval.
      health-check-interval = 5s

      # whether or not log failures when retrieving routee
      log-routee-retrieval-error = true

      # whether or not to shutdown the whole dispatcher when all workers died
      shutdown-on-all-worker-death = false

      # default timeout for shutingdown
      default-shutdown-timeout = 30s
    }

    circuit-breaker {
      enabled = on

      # Open duration per timeout, e.g. if the value is 10s and
      # there are 3 consecutive timeouts, the circuit breaker will be open for 30 seconds
      # if afterwards it gets another timeout, it will be open for another 40 seconds
      open-duration-base = 10s

      # CircuitBreaker opens for a worker when it sees consecutive timeouts at or above this threshold
      timeout-count-threshold = 3
    }

    # Only applicable for pushing dispatcher
    # Algorithm used is PIE (Proportional Integral controller Enhanced)
    # see https://www.ietf.org/mail-archive/web/iccrg/current/pdfB57AZSheOH.pdf
    back-pressure {
      enabled = on

      # Roughly speaking it's the threshold above which backpressure will start to drop requests
      reference-delay = 30s

      # The factor of which the dropping probably is effect by difference between estimated delay and
      # reference-delay. E.g. if the estimated delay is 11 seconds, and the reference delay is 10 seconds,
      # the probability will increase by ((11 - 10) / 10) * 0.2 = 2%, this is will be applied every
      # update-interval
      delay-factor-base = 0.2

      # The factor of which the dropping probably is effect by difference between estimated delay and
      # last delay. E.g. if the estimated delay is 11 seconds, the last delay is 12 seconds and
      # the reference delay is 10 seconds, then probability will decrease by
      # ((12 - 11) / 10) * 0.1 = 1%, this is will be applied every
      # update-interval
      delay-trend-factor-base = 0.1

      # Duration of unregulated high volumn traffic allowed
      duration-of-burst-allowed = 30s

      # The weight of the latest metric over old metrics when collecting
      # performance metrics.
      # E.g. if the last processing speed is 10 messsages per millis
      # and if the new processing speed collected is 6 msgs per millis
      # Given a weight of 0.3, the metrics
      # representing pool size 5 will be 6 * 0.3 + 10 * 0.7, i.e. 8.8 messages per millis
      # Obviously, this number should be between 0 and 1.
      weight-of-latest-metric = 0.2
    }

    # It automatically adjust the size of work pool (and thus the concurrency)
    # to an optimal one that provides the highest throughput.
    # This autothrottle works best when you expect the concurrency to performance function
    # to be a convex function, with which you can find a global optimal by walking towards
    # a better concurrency. For example, a CPU bound service may have an optimal concurrency
    # tied to the CPU cores available. When your service is IO bound, the optimal concurrency is
    # bound to optimal number of concurrent connections to that IO service - e.g. a 4 node
    # Elasticsearch cluster may handle 4-8 concurrent requests at optimal speed.
    # The dispatchers keep track of throughput at each pool size and perform the following
    # three resizing operations (one at a time) periodically:
    # 1. Downsize if it hasn't seen all workers ever fully utilized for a period of time.
    # 2. Explore to a random nearby pool size to try and collect throughput metrics.
    # 3. Optimize to a nearby pool size with a better (than any other nearby sizes)
    #    throughput metrics.
    # When the pool is fully-utilized (i.e. all workers are busy), it randomly chooses
    # between exploring and optimizing. When the pool has not been fully-utilized for a period of
    # time, it will downsize the pool to the last seen max utilization multiplied by
    # a configurable ratio.
    #
    # By constantly exploring and optimizing, the resizer will eventually walk to the optimal
    # size and remain nearby.
    # When the optimal size changes it will start walking towards the new one.
    autothrottle {

      enabled = on

      # The probability of ramping down when all workers are busy
      # during exploration.
      chance-of-scaling-down-when-full = 0.3

      # Interval between each pool size adjustment attempt
      # This interval must be at least as long as the update interval
      resize-interval = ${kanaloa.default-dispatcher.update-interval}

      # If the workers have not been fully utilized (i.e. all workers are busy) for such length,
      # the autothrottle will downsize the pool.
      downsize-after-under-utilization = 72h

      # When optimizing, the autothrottler only considers the sizes adjacent to the
      # current size. This number indicates how many adjacent sizes, at least, per side to consider .
      optimization-min-range = 6

      # When optimizing, the autothrottler only considers the sizes adjacent to the
      # current size. This number indicates the ratio between the number of adjacent sizes per side to current size.
      # E.g. 0.3 means that when pool size is at 100, the optimization will look at all pool sizes from 70-130 for
      # finding an optimal one to move towards to.
      optimization-range-ratio = 0.3

      # The maximum pool size change during
      # exploration. for example, 5 means that the change will be within +- 5
      max-explore-step-size = 5

      # When downsizing after a long streak of underutilization, the autothrottler
      # will downsize the pool to the highest utiliziation multiplied by a
      # a downsize ratio. This downsize ratio determines the new pool size
      # in comparison to the highest utilization.
      # E.g. if the highest utilization is 10, and the downsize ratio
      # is 0.8, the pool will be downsized to 8
      downsize-ratio = 0.8

      # Probability of doing an exploration v.s. optimization.
      exploration-ratio = 0.4

      # The weight of the latest metric over old metrics when collecting
      # performance metrics.
      # E.g. if the last processing speed is 10 millis per message at pool
      # size 5, and if the new processing speed collected is 6 millis per
      # message at pool size 5. Given a weight of 0.3, the metrics
      # representing pool size 5 will be 6 * 0.3 + 10 * 0.7, i.e. 8.8 millis
      # Obviously, this number should be between 0 and 1.
      weight-of-latest-metric = 0.2

      # When evaluating performance of a pool size, the weightOfLatency determines
      # how much weight on latency v.s. throughput. The score of a particular pool size is
      # calculated by
      # ```
      # weightOfLatency * normalizedLatency + (1 - weightOfLatency) * normalizedThroughput
      # ```
      # E.g. a weight-of-latency = 0.1 means that
      # a 10% improvement on latency has the same weight as a 2% improvement of throughput
      weight-of-latency = 0.2
    }

    # Metrics report configuration
    metrics {
      enabled = off
      #  use statsD for this metrics, also need to config statsD {host and port } down below
      #  statsD {
      #     namespace = "kanaloa"
      #     #Everything below is optional
      #     event-sample-rate = 0.25
      #     status-sample-rate = 1
      #  }
    }

  }

  #Default settings for pulling dispatchers
  default-pulling-dispatcher {
    worker-pool {
      shutdown-on-all-worker-death = true
    }

    # for pulling timeout might mean work lost, so it should be more careful.
    circuit-breaker {
      open-duration-base = 30s
      timeout-count-threshold = 1
    }

    back-pressure {
      enabled = off
    }

    autothrottle {
      downsize-after-under-utilization = 30s
    }
  }

  # If you need statsD reporting
  # statsD {
  #   host = "localhost"
  #   port = 8125
  #
  #   # If true, multiple stats will be sent in a single UDP packet
  #   multi-metrics = true
  #
  #   #If multiMetrics is true, this is the max buffer size before sending the UDP packet
  #   packet-buffer-size = 1024
  #
  #   # Default sample rate to use for metrics, if unspecified
  #   default-sample-rate = 1.0
  #
  # }



  # Your dispatchers config goes here
  dispatchers {

  # Here is an exaample
  #  example {
  #    work-timeout = 3s
  #    circuit-breaker {
  #      timeout-count-threshold = 1
  #    }
  #  }

  }


}
